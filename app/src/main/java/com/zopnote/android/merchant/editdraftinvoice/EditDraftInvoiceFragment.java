package com.zopnote.android.merchant.editdraftinvoice;


import android.app.ProgressDialog;
import android.arch.lifecycle.Observer;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v7.app.AlertDialog;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.zopnote.android.merchant.R;
import com.zopnote.android.merchant.data.model.DraftInvoiceItem;
import com.zopnote.android.merchant.data.model.Merchant;
import com.zopnote.android.merchant.databinding.EditDraftInvoiceFragBinding;
import com.zopnote.android.merchant.managesubscription.ManageSubscriptionsActivity;
import com.zopnote.android.merchant.util.Extras;
import com.zopnote.android.merchant.util.FormatUtil;
import com.zopnote.android.merchant.util.NetworkUtil;
import com.zopnote.android.merchant.util.Utils;


public class EditDraftInvoiceFragment extends Fragment {
    private EditDraftInvoiceFragBinding binding;
    private EditDraftInvoiceViewModel viewmodel;
    private double totalDue;
    private Double autoGeneratedDue;
    private Double manuallyAddedDue;
    private ProgressDialog progressDialog;

    public EditDraftInvoiceFragment() {
        // Required empty public constructor
    }


    public static EditDraftInvoiceFragment newInstance() {
        EditDraftInvoiceFragment fragment = new EditDraftInvoiceFragment();
        return fragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        binding = EditDraftInvoiceFragBinding.inflate(getLayoutInflater(), container, false);

        // hide all
        binding.contentView.setVisibility(View.GONE);
        binding.emptyView.getRoot().setVisibility(View.GONE);
        binding.loadingView.getRoot().setVisibility(View.GONE);
        binding.networkErrorView.getRoot().setVisibility(View.GONE);

        return binding.getRoot();
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        viewmodel = EditDraftInvoiceActivity.obtainViewModel(getActivity());

        viewmodel.merchant.observe(this, new Observer<Merchant>() {
            @Override
            public void onChanged(@Nullable Merchant merchant) {

                getInvoice();

                //to avoid calling api without merchant Id, also avoid multiple calls due to observer
                viewmodel.merchant.removeObserver(this);

            }
        });

        binding.networkErrorView.networkErrorRetry.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getInvoice();
            }
        });

        setupGetDraftInvoiceApiObservers();

        setupUpdateInvoiceApiCallObservers();
    }

    private void setupGetDraftInvoiceApiObservers() {

        viewmodel.getInvoiceApiCallRunning.observe(this, new Observer<Boolean>() {
            @Override
            public void onChanged(@Nullable Boolean running) {
                if (running) {
                    setStatusLoading();
                    viewmodel.getInvoiceApiCallRunning.setValue(false);
                }
            }
        });

        viewmodel.getInvoiceApiCallError.observe(this, new Observer<Boolean>() {
            @Override
            public void onChanged(@Nullable Boolean error) {
                if (error) {
                    if (!viewmodel.apiCallErrorMessage.equalsIgnoreCase(getResources().getString(R.string.draft_invoice_error_message))) {
                        binding.networkErrorView.networkErrorText.setText(viewmodel.apiCallErrorMessage);
                        setStatusNetworkError();
                        viewmodel.getInvoiceApiCallError.setValue(false);
                    }else {
                        Utils.showFailureToast(getActivity(),
                                getResources().getString(R.string.draft_invoice_error_message),
                                Toast.LENGTH_LONG);
                        getActivity().finish();
                    }

                }
            }
        });

        viewmodel.getInvoiceApiCallSuccess.observe(this, new Observer<Boolean>() {
            @Override
            public void onChanged(@Nullable Boolean success) {
                if (success) {

                    if(viewmodel.draftInvoice != null){

                        setupView();
                        setStatusReady();

                    }else{
                        setStatusEmpty();
                    }

                    viewmodel.getInvoiceApiCallSuccess.setValue(false);
                }
            }
        });
    }

    private void setupUpdateInvoiceApiCallObservers() {

        viewmodel.updateInvoiceApiCallRunning.observe(this, new Observer<Boolean>() {
            @Override
            public void onChanged(@Nullable Boolean running) {
                if (running) {
                    progressDialog = new ProgressDialog(getContext());
                    progressDialog.setMessage(getContext().getResources().getString(R.string.update_invoice_api_running_message));
                    progressDialog.setCancelable(false);
                    progressDialog.show();
                } else {
                    if (progressDialog != null && progressDialog.isShowing()) {
                        progressDialog.dismiss();
                        viewmodel.updateInvoiceApiCallRunning.setValue(false);
                    }
                }
            }
        });

        viewmodel.updateInvoiceApiCallError.observe(this, new Observer<Boolean>() {
            @Override
            public void onChanged(@Nullable Boolean error) {
                if (error) {
                    Utils.showFailureToast(getActivity(),
                            viewmodel.apiCallErrorMessage,
                            Toast.LENGTH_LONG);
                    viewmodel.updateInvoiceApiCallError.setValue(false);
                }
            }
        });

        viewmodel.updateInvoiceApiCallSuccess.observe(this, new Observer<Boolean>() {
            @Override
            public void onChanged(@Nullable Boolean success) {
                if (success) {
                    Utils.showSuccessToast(getActivity(),
                            getContext().getResources().getString(R.string.update_invoice_success_message),
                            Toast.LENGTH_LONG);
                    viewmodel.updateInvoiceApiCallSuccess.setValue(false);

                    //get latest data
                    getInvoice();

                    if(getActivity() != null){
                        ((EditDraftInvoiceActivity)getActivity()).updateDraftInvoiceReportIfApplicable();
                    }
                }
            }
        });
    }

    private void getInvoice() {
        if (NetworkUtil.isNetworkAvailable(getActivity())) {

            viewmodel.getInvoice();

        }else{

            binding.networkErrorView.networkErrorText.setText(R.string.no_network_error);
            setStatusNetworkError();
        }
    }

    private void setupView() {

        binding.autoCalculatedInvoiceItemsContainer.removeAllViews();
        binding.manuallyAddedInvoiceItemsContainer.removeAllViews();

        if(viewmodel.draftInvoice.getInvoiceItems() != null && ! viewmodel.draftInvoice.getInvoiceItems().isEmpty()){
            viewmodel.draftInvoiceItems = viewmodel.draftInvoice.getInvoiceItems();

            addInvoiceItemsViews();
        }else{
            //no invoice items
            binding.totalDueAmount.setText(FormatUtil.AMOUNT_FORMAT_WITH_ZERO_DECIMALS.format(viewmodel.draftInvoice.getInvoiceAmount()));
        }

        if(viewmodel.draftInvoice.getNotes() != null && viewmodel.draftInvoice.getNotes().length() > 0){
            binding.notes.setText(viewmodel.draftInvoice.getNotes());
            binding.notesLayout.setVisibility(View.VISIBLE);
        }else{
            binding.notesLayout.setVisibility(View.GONE);
        }

        binding.editSubscriptionAndPauses.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openManageSubscriptions();
            }
        });

        binding.addInvoiceItemButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showAddInvoiceItemDialog();
            }
        });

        binding.saveInvoiceChangesButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(NetworkUtil.enforceNetworkConnection(getContext())){
                    viewmodel.updateInvoice();
                }
            }
        });
    }

    private void addInvoiceItemsViews() {
        totalDue = 0d;
        autoGeneratedDue = 0d;
        manuallyAddedDue = 0d;

        for (int i = 0; i < viewmodel.draftInvoiceItems.size(); i++) {
            DraftInvoiceItem draftInvoiceItem = viewmodel.draftInvoiceItems.get(i);

            if(draftInvoiceItem.isAutoGenerated()){
                addAutoGeneratedInvoiceItems(draftInvoiceItem);
                autoGeneratedDue = autoGeneratedDue + draftInvoiceItem.getAmount();

            }else {
                addManuallyAddedInvoiceItems(draftInvoiceItem, i);
                manuallyAddedDue = manuallyAddedDue + draftInvoiceItem.getAmount();
            }
        }

        setTotalDue();
    }

    private void setTotalDue() {
        totalDue = autoGeneratedDue + manuallyAddedDue;
        binding.totalDueAmount.setText(FormatUtil.AMOUNT_FORMAT_WITH_ZERO_DECIMALS.format(totalDue));
    }

    private void addAutoGeneratedInvoiceItems(DraftInvoiceItem draftInvoiceItem) {
        View draftAutoInvoiceItemView = LayoutInflater.from(getContext()).inflate(R.layout.edit_draft_invoice_auto_generated_item,
                binding.autoCalculatedInvoiceItemsContainer, false);
        ((TextView)draftAutoInvoiceItemView.findViewById(R.id.invoiceItemName)).setText(draftInvoiceItem.getItem());

        ((TextView)draftAutoInvoiceItemView.findViewById(R.id.invoiceItemAmount)).setText(FormatUtil.AMOUNT_FORMAT_WITH_ZERO_DECIMALS.format(draftInvoiceItem.getAmount()));
        binding.autoCalculatedInvoiceItemsContainer.addView(draftAutoInvoiceItemView);
    }

    private void addManuallyAddedInvoiceItems(DraftInvoiceItem draftInvoiceItem, int index) {
        final View draftManualInvoiceItemView = LayoutInflater.from(getContext()).inflate(R.layout.edit_draft_invoice_manual_item,
                binding.manuallyAddedInvoiceItemsContainer, false);
        ((TextView)draftManualInvoiceItemView.findViewById(R.id.invoiceItemName)).setText(draftInvoiceItem.getItem());

        ((TextView)draftManualInvoiceItemView.findViewById(R.id.invoiceItemAmount)).setText(FormatUtil.AMOUNT_FORMAT_WITH_ZERO_DECIMALS.format(draftInvoiceItem.getAmount()));

        draftManualInvoiceItemView.setTag(index);


        draftManualInvoiceItemView.findViewById(R.id.editInvoiceItemButton).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showEditInvoiceItemDialog(draftManualInvoiceItemView.getTag());
            }
        });

        draftManualInvoiceItemView.findViewById(R.id.deleteInvoiceItemButton).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showInvoiceItemDeleteConfirmationDialog(draftManualInvoiceItemView.getTag());
            }
        });

        binding.manuallyAddedInvoiceItemsContainer.addView(draftManualInvoiceItemView);
    }

    private void showEditInvoiceItemDialog(Object tag) {
        int invoiceItemIndex = (int) tag;
        final DraftInvoiceItem invoiceItem = viewmodel.draftInvoiceItems.get(invoiceItemIndex);

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        LayoutInflater inflater = LayoutInflater.from(getActivity());
        final View view = inflater.inflate(R.layout.add_edit_invoice_item_dialog, null);

        final EditText itemNameEditText = view.findViewById(R.id.itemName);
        itemNameEditText.setText(invoiceItem.getItem());

        final EditText itemAmountEditText = view.findViewById(R.id.itemAmount);
        itemAmountEditText.setText(FormatUtil.AMOUNT_FORMAT_WITH_ZERO_DECIMALS.format(invoiceItem.getAmount()));

        builder.setView(view);

        builder.setMessage(R.string.edit_invoice_item_message)
                .setPositiveButton(R.string.button_save, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        //Do nothing here
                    }
                })
                .setNegativeButton(R.string.button_cancel, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                    }
                });
        final AlertDialog dialog = builder.create();
        dialog.show();
        //Override the handler
        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //update invoice item

                if(isValidItemName(itemNameEditText) && isValidItemAmount(itemAmountEditText)){

                    String invoiceItemName = itemNameEditText.getText().toString();
                    invoiceItem.setItem(invoiceItemName);

                    String editedAmount = itemAmountEditText.getText().toString();
                    Double amount = Double.parseDouble(editedAmount);
                    invoiceItem.setAmount(amount);

                    updateInvoiceItemsView();
                    dialog.dismiss();
                }
            }
        });
    }

    private void showInvoiceItemDeleteConfirmationDialog(Object tag) {
        final int invoiceItemIndex = (int) tag;
        final DraftInvoiceItem invoiceItem = viewmodel.draftInvoiceItems.get(invoiceItemIndex);

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        String message = getResources().getString(R.string.invoice_item_delete_warning_message, invoiceItem.getItem(),
                FormatUtil.getRupeePrefixedAmount(this.getActivity(),
                        invoiceItem.getAmount(), FormatUtil.AMOUNT_FORMAT_WITH_ZERO_DECIMALS));

        builder.setMessage(message)
                .setPositiveButton(R.string.button_delete, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        //Do nothing here
                    }
                })
                .setNegativeButton(R.string.button_cancel, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                    }
                });
        final AlertDialog dialog = builder.create();
        dialog.show();
        //Override the handler
        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                deleteInvoiceItem(invoiceItemIndex);
                dialog.dismiss();
            }
        });
    }

    private void deleteInvoiceItem(int invoiceItemIndex) {
        viewmodel.draftInvoiceItems.remove(invoiceItemIndex);
        binding.autoCalculatedInvoiceItemsContainer.removeAllViews();
        binding.manuallyAddedInvoiceItemsContainer.removeAllViews();
        addInvoiceItemsViews();
    }


    private void updateInvoiceItemsView() {
        binding.autoCalculatedInvoiceItemsContainer.removeAllViews();
        binding.manuallyAddedInvoiceItemsContainer.removeAllViews();
        addInvoiceItemsViews();
    }

    private void showAddInvoiceItemDialog() {

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());

        LayoutInflater inflater = LayoutInflater.from(getActivity());
        final View view = inflater.inflate(R.layout.add_edit_invoice_item_dialog, null);

        final EditText itemNameEditText = view.findViewById(R.id.itemName);
        final EditText itemAmountEditText = view.findViewById(R.id.itemAmount);

        builder.setView(view);

        builder.setMessage(R.string.add_invoice_item_message)
                .setPositiveButton(R.string.button_save, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        //Do nothing here
                    }
                })
                .setNegativeButton(R.string.button_cancel, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                    }
                });
        final AlertDialog dialog = builder.create();
        dialog.show();
        //Override the handler
        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(isValidItemName(itemNameEditText) && isValidItemAmount(itemAmountEditText)){

                    String invoiceItemName = itemNameEditText.getText().toString();
                    String invoiceItemAmount = itemAmountEditText.getText().toString();

                    Double amount = Double.parseDouble(invoiceItemAmount);

                    DraftInvoiceItem invoiceItem = new DraftInvoiceItem();
                    invoiceItem.setItem(invoiceItemName);
                    invoiceItem.setAmount(amount);
                    viewmodel.draftInvoiceItems.add(invoiceItem);

                    updateInvoiceItemsView();
                    dialog.dismiss();

                }
            }
        });
    }


    private boolean isValidItemName(EditText nameEditText) {
        if( ! nameEditText.getText().toString().trim().isEmpty()){
            return true;
        }else{
            nameEditText.setError(getString(R.string.invoice_item_name_error_message));
            return false;
        }
    }

    private boolean isValidItemAmount(EditText amountEditText){
        if( ! amountEditText.getText().toString().trim().isEmpty()){
            try {
                Double.parseDouble(amountEditText.getText().toString());
                return true;
            }catch (Exception ex){
                amountEditText.setError(getString(R.string.invoice_amount_error_message));
                return false;
            }
        }else{
            amountEditText.setError(getString(R.string.invoice_amount_error_message));
            return false;
        }
    }

    private void showUpdateDraftInvoiceWarningDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setMessage(R.string.update_draft_invoice_warning_message)
                .setPositiveButton(R.string.button_ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        //Do nothing here
                    }
                })
                .setNegativeButton(R.string.button_cancel, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                    }
                });
        final AlertDialog dialog = builder.create();
        dialog.show();
        //Override the handler
        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (NetworkUtil.enforceNetworkConnection(getContext())) {
                    viewmodel.updateInvoice();
                    dialog.dismiss();
                }
            }
        });
    }

    private void openManageSubscriptions() {
        Intent intent = new Intent(this.getActivity(), ManageSubscriptionsActivity.class);
        intent.putExtra(Extras.CUSTOMER_ID, viewmodel.customerId);
        intent.putExtra(Extras.CALLING_ACTIVITY_CLASS, EditDraftInvoiceActivity.class.getSimpleName());
        startActivity(intent);
    }

    private void setStatusNetworkError() {
        binding.contentView.setVisibility(View.GONE);
        binding.emptyView.getRoot().setVisibility(View.GONE);
        binding.networkErrorView.getRoot().setVisibility(View.VISIBLE);
        binding.loadingView.getRoot().setVisibility(View.GONE);
    }

    private void setStatusLoading() {
        binding.contentView.setVisibility(View.GONE);
        binding.emptyView.getRoot().setVisibility(View.GONE);
        binding.networkErrorView.getRoot().setVisibility(View.GONE);
        binding.loadingView.getRoot().setVisibility(View.VISIBLE);
    }

    private void setStatusEmpty() {
        binding.contentView.setVisibility(View.GONE);
        binding.emptyView.getRoot().setVisibility(View.VISIBLE);
        binding.networkErrorView.getRoot().setVisibility(View.GONE);
        binding.loadingView.getRoot().setVisibility(View.GONE);
    }

    private void setStatusReady() {
        binding.contentView.setVisibility(View.VISIBLE);
        binding.emptyView.getRoot().setVisibility(View.GONE);
        binding.networkErrorView.getRoot().setVisibility(View.GONE);
        binding.loadingView.getRoot().setVisibility(View.GONE);
    }
}

