// Generated by data binding compiler. Do not edit!
package com.zopnote.android.merchant.databinding;

import android.databinding.DataBindingUtil;
import android.databinding.ViewDataBinding;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.zopnote.android.merchant.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class CustomerItemBinding extends ViewDataBinding {
  @NonNull
  public final Button addNewOrder;

  @NonNull
  public final TextView addressLine1;

  @NonNull
  public final LinearLayout addressLine1Layout;

  @NonNull
  public final TextView addressLine2;

  @NonNull
  public final TextView doorNumber;

  @NonNull
  public final View highlightBar;

  @NonNull
  public final TextView invoiceAmount;

  @NonNull
  public final LinearLayout invoiceAmountLayout;

  @NonNull
  public final LinearLayout invoicePaidStatusLayout;

  @NonNull
  public final TextView mobileNumber;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView nameMobileSeparator;

  protected CustomerItemBinding(Object _bindingComponent, View _root, int _localFieldCount,
      Button addNewOrder, TextView addressLine1, LinearLayout addressLine1Layout,
      TextView addressLine2, TextView doorNumber, View highlightBar, TextView invoiceAmount,
      LinearLayout invoiceAmountLayout, LinearLayout invoicePaidStatusLayout, TextView mobileNumber,
      TextView name, TextView nameMobileSeparator) {
    super(_bindingComponent, _root, _localFieldCount);
    this.addNewOrder = addNewOrder;
    this.addressLine1 = addressLine1;
    this.addressLine1Layout = addressLine1Layout;
    this.addressLine2 = addressLine2;
    this.doorNumber = doorNumber;
    this.highlightBar = highlightBar;
    this.invoiceAmount = invoiceAmount;
    this.invoiceAmountLayout = invoiceAmountLayout;
    this.invoicePaidStatusLayout = invoicePaidStatusLayout;
    this.mobileNumber = mobileNumber;
    this.name = name;
    this.nameMobileSeparator = nameMobileSeparator;
  }

  @NonNull
  public static CustomerItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.customer_item, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static CustomerItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<CustomerItemBinding>inflateInternal(inflater, R.layout.customer_item, root, attachToRoot, component);
  }

  @NonNull
  public static CustomerItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.customer_item, null, false, component)
   */
  @NonNull
  @Deprecated
  public static CustomerItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<CustomerItemBinding>inflateInternal(inflater, R.layout.customer_item, null, false, component);
  }

  public static CustomerItemBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static CustomerItemBinding bind(@NonNull View view, @Nullable Object component) {
    return (CustomerItemBinding)bind(component, view, R.layout.customer_item);
  }
}
