// Generated by data binding compiler. Do not edit!
package com.zopnote.android.merchant.databinding;

import android.databinding.DataBindingUtil;
import android.databinding.ViewDataBinding;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.CoordinatorLayout;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;
import com.zopnote.android.merchant.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class AddCustomerActBinding extends ViewDataBinding {
  @NonNull
  public final Button backButton;

  @NonNull
  public final FrameLayout contentFrame;

  @NonNull
  public final CoordinatorLayout coordinatorLayout;

  @NonNull
  public final ImageView pasteRouteButton;

  @NonNull
  public final Button reviewAndSubmit;

  @NonNull
  public final TextView stepTitle;

  @NonNull
  public final Button submitButton;

  @NonNull
  public final Toolbar toolbar;

  protected AddCustomerActBinding(Object _bindingComponent, View _root, int _localFieldCount,
      Button backButton, FrameLayout contentFrame, CoordinatorLayout coordinatorLayout,
      ImageView pasteRouteButton, Button reviewAndSubmit, TextView stepTitle, Button submitButton,
      Toolbar toolbar) {
    super(_bindingComponent, _root, _localFieldCount);
    this.backButton = backButton;
    this.contentFrame = contentFrame;
    this.coordinatorLayout = coordinatorLayout;
    this.pasteRouteButton = pasteRouteButton;
    this.reviewAndSubmit = reviewAndSubmit;
    this.stepTitle = stepTitle;
    this.submitButton = submitButton;
    this.toolbar = toolbar;
  }

  @NonNull
  public static AddCustomerActBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.add_customer_act, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static AddCustomerActBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<AddCustomerActBinding>inflateInternal(inflater, R.layout.add_customer_act, root, attachToRoot, component);
  }

  @NonNull
  public static AddCustomerActBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.add_customer_act, null, false, component)
   */
  @NonNull
  @Deprecated
  public static AddCustomerActBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<AddCustomerActBinding>inflateInternal(inflater, R.layout.add_customer_act, null, false, component);
  }

  public static AddCustomerActBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static AddCustomerActBinding bind(@NonNull View view, @Nullable Object component) {
    return (AddCustomerActBinding)bind(component, view, R.layout.add_customer_act);
  }
}
