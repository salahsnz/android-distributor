// Generated by data binding compiler. Do not edit!
package com.zopnote.android.merchant.databinding;

import android.databinding.DataBindingUtil;
import android.databinding.ViewDataBinding;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.zopnote.android.merchant.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class SettlementAmountBreakupLayoutBinding extends ViewDataBinding {
  @NonNull
  public final LinearLayout TotInvPro;

  @NonNull
  public final LinearLayout TotOrdPro;

  @NonNull
  public final TextView advancePaid;

  @NonNull
  public final LinearLayout advancePaidLayout;

  @NonNull
  public final LinearLayout advanceTransferLayout;

  @NonNull
  public final TextView availableSettledAmount;

  @NonNull
  public final TextView bankCharges;

  @NonNull
  public final LinearLayout commission;

  @NonNull
  public final LinearLayout defaultL;

  @NonNull
  public final LinearLayout defaultTL;

  @NonNull
  public final View divider2;

  @NonNull
  public final View divider3;

  @NonNull
  public final TextView gst;

  @NonNull
  public final TextView gstCharges;

  @NonNull
  public final TextView lessCharges;

  @NonNull
  public final TextView pendingAmount;

  @NonNull
  public final TextView pendingAmtSettled;

  @NonNull
  public final LinearLayout pendingSettlementLayout;

  @NonNull
  public final TextView pendingTobeTransfer;

  @NonNull
  public final LinearLayout pendingTobeTransferLayout;

  @NonNull
  public final TextView settledAmount;

  @NonNull
  public final TextView settledAmountOD;

  @NonNull
  public final TextView subLessCharges;

  @NonNull
  public final LinearLayout subscription;

  @NonNull
  public final LinearLayout topLayout;

  @NonNull
  public final TextView totalNoOfInvoicesProcessed;

  @NonNull
  public final TextView totalNoOfOrdersProcessed;

  @NonNull
  public final Button transferAdvance;

  @NonNull
  public final TextView transferredAmount;

  @NonNull
  public final View viewLastDivider;

  @NonNull
  public final TextView zopnoteCharges;

  @NonNull
  public final TextView zopnoteSubscriptionCharges;

  protected SettlementAmountBreakupLayoutBinding(Object _bindingComponent, View _root,
      int _localFieldCount, LinearLayout TotInvPro, LinearLayout TotOrdPro, TextView advancePaid,
      LinearLayout advancePaidLayout, LinearLayout advanceTransferLayout,
      TextView availableSettledAmount, TextView bankCharges, LinearLayout commission,
      LinearLayout defaultL, LinearLayout defaultTL, View divider2, View divider3, TextView gst,
      TextView gstCharges, TextView lessCharges, TextView pendingAmount, TextView pendingAmtSettled,
      LinearLayout pendingSettlementLayout, TextView pendingTobeTransfer,
      LinearLayout pendingTobeTransferLayout, TextView settledAmount, TextView settledAmountOD,
      TextView subLessCharges, LinearLayout subscription, LinearLayout topLayout,
      TextView totalNoOfInvoicesProcessed, TextView totalNoOfOrdersProcessed,
      Button transferAdvance, TextView transferredAmount, View viewLastDivider,
      TextView zopnoteCharges, TextView zopnoteSubscriptionCharges) {
    super(_bindingComponent, _root, _localFieldCount);
    this.TotInvPro = TotInvPro;
    this.TotOrdPro = TotOrdPro;
    this.advancePaid = advancePaid;
    this.advancePaidLayout = advancePaidLayout;
    this.advanceTransferLayout = advanceTransferLayout;
    this.availableSettledAmount = availableSettledAmount;
    this.bankCharges = bankCharges;
    this.commission = commission;
    this.defaultL = defaultL;
    this.defaultTL = defaultTL;
    this.divider2 = divider2;
    this.divider3 = divider3;
    this.gst = gst;
    this.gstCharges = gstCharges;
    this.lessCharges = lessCharges;
    this.pendingAmount = pendingAmount;
    this.pendingAmtSettled = pendingAmtSettled;
    this.pendingSettlementLayout = pendingSettlementLayout;
    this.pendingTobeTransfer = pendingTobeTransfer;
    this.pendingTobeTransferLayout = pendingTobeTransferLayout;
    this.settledAmount = settledAmount;
    this.settledAmountOD = settledAmountOD;
    this.subLessCharges = subLessCharges;
    this.subscription = subscription;
    this.topLayout = topLayout;
    this.totalNoOfInvoicesProcessed = totalNoOfInvoicesProcessed;
    this.totalNoOfOrdersProcessed = totalNoOfOrdersProcessed;
    this.transferAdvance = transferAdvance;
    this.transferredAmount = transferredAmount;
    this.viewLastDivider = viewLastDivider;
    this.zopnoteCharges = zopnoteCharges;
    this.zopnoteSubscriptionCharges = zopnoteSubscriptionCharges;
  }

  @NonNull
  public static SettlementAmountBreakupLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.settlement_amount_breakup_layout, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static SettlementAmountBreakupLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<SettlementAmountBreakupLayoutBinding>inflateInternal(inflater, R.layout.settlement_amount_breakup_layout, root, attachToRoot, component);
  }

  @NonNull
  public static SettlementAmountBreakupLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.settlement_amount_breakup_layout, null, false, component)
   */
  @NonNull
  @Deprecated
  public static SettlementAmountBreakupLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<SettlementAmountBreakupLayoutBinding>inflateInternal(inflater, R.layout.settlement_amount_breakup_layout, null, false, component);
  }

  public static SettlementAmountBreakupLayoutBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static SettlementAmountBreakupLayoutBinding bind(@NonNull View view,
      @Nullable Object component) {
    return (SettlementAmountBreakupLayoutBinding)bind(component, view, R.layout.settlement_amount_breakup_layout);
  }
}
